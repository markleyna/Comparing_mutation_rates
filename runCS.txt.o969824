
R version 3.3.1 (2016-06-21) -- "Bug in Your Hair"
Copyright (C) 2016 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> #Import Packages
> #http://stackoverflow.com/questions/27893230/installation-of-package-file-path-had-non-zero-exit-status-in-r
> #install.packages("stringr", "~/Rlibs", "https://cran.cnr.berkeley.edu/")
> library(stringr)
> library(parallel)
> #library('readr')
> library('readr', lib.loc="/home/nmarkle/Rlibs/")
> 
> #Variable Declaration Block
> numInRow <- 2
> Genes <- read.csv("/home/nmarkle/Comparing_mutation_rates/RVersionCBSalGenes.csv", stringsAsFactors = FALSE)
> CitroBacDNA<-read_file("/home/nmarkle/Comparing_mutation_rates/CitroBacKPureDNA.txt")
> CitroBacDNA<-gsub("\n","",CitroBacDNA)
> SalDNA<-read_file("/home/nmarkle/Comparing_mutation_rates/SalmonellaPureDNA.txt")
> SalDNA<-gsub("\n","",SalDNA)
> Genes <- data.frame(Genes$gapnum, Genes$cbgeneseq, Genes$salgeneseq, stringsAsFactors = FALSE)
> #-------Testing line!-------
> #Genes <- head(Genes, n=1)
> #---------------------------
> G1<-as.vector(Genes$Genes.gapnum)
> G2<-as.vector(Genes$Genes.cbgeneseq)
> G3<-as.vector(Genes$Genes.salgeneseq)
> 
> buildchar = "Q"
> Gene1Base <- c(buildchar,buildchar)
> Gene2Base<-c(buildchar,buildchar)
> PreCount<-c(-1,-1)
> PostCount<-c(-1,-1)
> DF = data.frame(Gene1Base,Gene2Base,PreCount,PostCount)
> DF <- data.frame(lapply(DF, as.character), stringsAsFactors=FALSE)
> Gene1RunTitle <- paste(">", "ECGap_number","k",sep = "")
> Gene2RunTitle <- paste(">", "SalGap_number", "k", sep = "")
> 
> #CLUSAL Run on Genes
> clusal_run <- function(testNum, Gene1, Gene2) {
+   Gene1Base <- c(buildchar,buildchar)
+   Gene2Base<-c(buildchar,buildchar)
+   PreCount<-c(-1,-1)
+   PostCount<-c(-1,-1)
+   tempDF = data.frame(Gene1Base,Gene2Base,PreCount,PostCount)
+   tempDF <- data.frame(lapply(DF, as.character), stringsAsFactors=FALSE)
+   Gene1Test = toString(Gene1)
+   Gene2Test = toString(Gene2)
+   Gene1break = ""
+   Gene2break = ""
+   Gene1RunTitle <- paste(">", "ECGap_number","k",sep = "")
+   Gene2RunTitle <- paste(">", "SalGap_number", "k", sep = "")
+  
+   #write text file
+   fileName <- paste("FastaInCS", testNum, ".txt", sep = "")
+   fileConn<-file(fileName)
+   writeLines("\n",fileConn)
+   close(fileConn)
+   sink(fileName)
+   cat(Gene1RunTitle)
+   cat("\n")
+   cat(Gene1Test)
+   cat("\n")
+   cat(Gene2RunTitle)
+   cat("\n")
+   cat(Gene2Test)
+   sink()
+   systemCall = paste("clustalw2 -infile=", fileName, " -type=DNA", sep="")
+   system(systemCall)
+   alnlines<-readLines(paste("FastaInCS", testNum, ".aln", sep= ""))
+   #Testing line for llc server
+   #alnlines<-readLines("/home/nmarkle/Comparing_mutation_rates/FastaTest.aln")
+   #alnlines<-readLines(paste("/home/nmarkle/Comparing_mutation_rates/Fastas/FastaIn", testNum, ".aln", sep=""))
+ 
+   alnlines1<-grep(substring(Gene1RunTitle,2), alnlines, value=TRUE)
+   alnlines2<-grep(substring(Gene2RunTitle,2), alnlines, value=TRUE)
+   alnlines1<-gsub(substring(Gene1RunTitle,2), "", alnlines1)
+   alnlines1<-gsub(" ", "", alnlines1)
+   alnlines2<-gsub(substring(Gene2RunTitle,2), "", alnlines2)
+   alnlines2<-gsub(" ", "", alnlines2)
+   alnlines1<-paste(alnlines1, collapse='')
+   alnlines2<-paste(alnlines2, collapse='')
+   Gene1gapstring <- alnlines1
+   Gene2gapstring <- alnlines2
+    
+   s = 1
+   Flag1 = FALSE
+   Flag2 = FALSE
+   PreCounter = 0
+   PostCounter =0
+   #start of intra-gene break isolation
+   while (s <= nchar(Gene1gapstring)) {
+     Gene1workingcharacter = substring(Gene1gapstring,s,s)
+     Gene2workingcharacter = substring(Gene2gapstring,s,s)
+     s = s + 1
+     if (Gene1workingcharacter != Gene2workingcharacter && Flag2 == TRUE && PostCounter > 0) {
+       #print(Gene1break)
+       #print(Gene2break)
+       #print(nchar(Gene1break))
+       if (nchar(Gene1break) == numInRow) {
+         Addrow = c(Gene1break,Gene2break,PreCounter,PostCounter)
+         tempDF = rbind(tempDF, Addrow)
+       }
+       Flag2 = TRUE
+       Flag1 = FALSE
+       PreCounter = PostCounter
+       PostCounter = 0
+       Gene1break = Gene1workingcharacter
+       Gene2break = Gene2workingcharacter
+     }
+     else if (Gene1workingcharacter != Gene2workingcharacter && Flag2 == TRUE && PostCounter == 0) {
+       if (nchar(Gene1break) < numInRow) {
+         Gene1break <- paste(Gene1break, Gene1workingcharacter, sep = '')
+         Gene2break <- paste(Gene2break, Gene2workingcharacter,sep = '')
+       }
+       else {
+ 	      PreCounter = 0
+ 	      Flag2 = FALSE
+ 	      Flag1 = FALSE
+ 	      Gene1break = ""
+ 	      Gene2break = ""
+       }
+     }
+     else if (Gene1workingcharacter == Gene2workingcharacter && Flag2 == TRUE) {
+       PostCounter = PostCounter + 1
+     }
+     else if (Gene1workingcharacter != Gene2workingcharacter && Flag1 == TRUE) {
+       Flag1 = FALSE
+       Flag2 = TRUE
+       Gene1break = Gene1workingcharacter
+       Gene2break = Gene2workingcharacter
+     }
+     else if (Gene1workingcharacter == Gene2workingcharacter && Flag1 == TRUE) {
+       PreCounter = PreCounter + 1
+     }
+     else if (Gene1workingcharacter == Gene2workingcharacter && Flag1 == FALSE) {
+       PreCounter = PreCounter + 1
+       Flag1 = TRUE
+     }
+     
+     # end of intra-gene break identification
+   }
+   return(tempDF)
+ }
> 
> DF <- mapply(clusal_run, G1, G2, G3, SIMPLIFY = FALSE)



 CLUSTAL 2.1 Multiple Sequence Alignments


Sequence type explicitly set to DNA
Sequence format is Pearson
Sequence 1: ECGap_numberk  31051 bp
Sequence 2: SalGap_numberk 31070 bp
Start of Pairwise alignments
Aligning...

Sequences (1:2) Aligned. Score:  0
Guide tree file created:   [FastaInCS1.dnd]

There are 1 groups
Start of Multiple Alignment

Aligning...
Group 1:                     Delayed
Alignment Score 70064

CLUSTAL-Alignment file created  [FastaInCS1.aln]




 CLUSTAL 2.1 Multiple Sequence Alignments


Sequence type explicitly set to DNA
Sequence format is Pearson
Sequence 1: ECGap_numberk  28235 bp
Sequence 2: SalGap_numberk 28154 bp
Start of Pairwise alignments
Aligning...

Sequences (1:2) Aligned. Score:  0
Guide tree file created:   [FastaInCS2.dnd]

There are 1 groups
Start of Multiple Alignment

Aligning...
Group 1:                     Delayed
Alignment Score 59917

CLUSTAL-Alignment file created  [FastaInCS2.aln]




 CLUSTAL 2.1 Multiple Sequence Alignments


Sequence type explicitly set to DNA
Sequence format is Pearson
